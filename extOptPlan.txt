

Given a source domain going into a larger or smaller domain, I can use the sum formulas to keep the structure of the egoAct code. 

For a more accurate domain moving into a less accurate domain I will simply sum the results. I am trading speed for accuracy with the understanding that if the user has selected a less accurate domain they are implicitly uninterested in smaller length scales. 

The main thing that I need to do is decide on the pair structure, and then implement the partial Fourier transform sum operations. 

egoAct should be broken up into three parts---an expansion operator, computing the standard even/odd Fourier transform that I have already coded; a mixing operator, performing partial Fourier transforms, Green function multiplication, and partial inverse Fourier transforms; and a closure operator, computing the standard body inverse Fourier transform. 

I will expand the GlaOprMem construct to hold list of vector versions of current memory pieces + pair information.

Add support for multi-GPU operation.

I have changed the GlaOprMem construct. 